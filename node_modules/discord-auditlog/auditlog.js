const Discord = require('discord.js');
const DB = require("../../Features/dbhandlers")
const Leveling = require("discord-leveling");
const bot1 = require('../../MusicBots/musicbot')
const bot2 = require("../../MusicBots/musicbot1")

module.exports = function(bot, connectedUsers,  options) {
	//USER JOINED
	bot.on('guildMemberAdd', async member => {
		var embed = {
			"description": `<@${member.user.id}> - *${member.user.id}*\nUser Created on: ${new Date(member.user.createdTimestamp).toDateString()}`,
			"url": member.user.displayAvatarURL,
			"color": 65280,
			"timestamp": new Date(),
			"footer": {
				"text": `${member.nickname || member.user.username}`
			},
			"thumbnail": {
			  "url": member.user.displayAvatarURL,
			},
			"author": {
			  "name": `USER JOINED : ${member.user.tag}`,
			  "icon_url": "https://cdn.discordapp.com/emojis/435119354867220511.png"
			}
		};
		Send(bot, member.guild, options, embed, "guildMemberAdd") 
		await DB.CreateCounters({userid: member.user.id, commands: 0, messages: 0})
		await DB.CreateInventory({userid: member.user.id, DJ: 0, channel: 0, Arany: 0, Gyémánt: 0})
		await DB.CreateEconomyDB({userid: member.user.id, balance: 0, daily: 0})
		await DB.CreateQueue({ userid: member.id, queue: []})
		await DB.CreatePrivateChannels({ userid: member.id, channels: []})
		await DB.CreateVolumes({userid: member.user.id, volume: 50})
		Leveling.SetXp(member.user.id, 1)
		member.addRole('440804615185760256')

		const WelcomeEmbed = new Discord.RichEmbed({
			"title": `Üdvözöllek a szerveren ${member.user.username}!`,
			"description": "Én vagyok a We Are Gamers személyes robotja.\n\nÉn szoktam karbantartani a szervert és kezelni a felhasználókat! Ha segitség kellene a parancsokkal és a szerverrel kapcsolatban csak ird nekem hogy '!help'!\n\n➤ [**__We Are Gamers Hivatalos Weboldala__**](http://www.wearegamers.hu)",
			"url": "http://www.wearegamers.hu",
			"color": 7199268,
			"timestamp": "2019-03-10T10:36:26.208Z",
			"footer": {
				"icon_url": "https://i.imgur.com/DeyXB7b.jpg",
				"text": "Üdvözöllek a szerveren!"
			},
			"author": {
				"name": "We Are Gamers",
				"url": "http://www.wearegamers.hu",
				"icon_url": "https://i.imgur.com/DeyXB7b.jpg"
			}
		})
		member.send(WelcomeEmbed)
	});

	//USER LEFT
	bot.on('guildMemberRemove', async member => {
		var embed = {
			"description": `<@${member.user.id}> - *${member.user.id}*`,
			"url": member.user.displayAvatarURL,
			"color": 16711680,
			"timestamp": new Date(),
			"footer": {
				"text": `${member.nickname || member.user.username}`
			},
			"thumbnail": {
			  "url": member.user.displayAvatarURL,
			},
			"author": {
			  "name": `USER LEFT : ${member.user.tag}`,
			  "icon_url": "https://cdn.discordapp.com/emojis/435119363595436042.png"
			},
			"fields": [
				{
				  "name": "Nickname",
				  "value": `**${member.nickname || member.user.username}**`,
				  "inline": true
				}
			]
		};
		Send(bot, member.guild, options, embed, "guildMemberRemove")
		Leveling.SetXp(member.user.id, 1)

	});
	//USER KICKED
		//Not very doable

	//USER BANNED
	bot.on("guildBanAdd", (banguild, banuser) => {		
		var embed = {
			"description": `<@${banuser.id}> - *${banuser.id}*`,
			"url": banuser.displayAvatarURL,
			"color": 16711901,
			"timestamp": new Date(),
			"footer": {
				"text": `${banuser.username}`
			},
			"thumbnail": {
				"url": banuser.displayAvatarURL,
			},
			"author": {
				"name": `USER BANNED : ${banuser.tag}`,
				"icon_url": "https://cdn.discordapp.com/emojis/435119375138422811.png"
			}            
		};
		Send(bot, banguild, options, embed, "guildBanAdd") 
	});

	//USER UNBANNED
	bot.on("guildBanRemove", (banguild, banuser) => {
		var embed = {
			"description": `<@${banuser.id}> - *${banuser.id}*`,
			"url": banuser.displayAvatarURL,
			"color": 16776960,
			"timestamp": new Date(),
			"footer": {
				"text": `${banuser.username}`
			},
			"thumbnail": {
				"url": banuser.displayAvatarURL,
			},
			"author": {
					"name": `USER UNBANNED : ${banuser.tag}`,
					"icon_url": "https://cdn.discordapp.com/emojis/435462140900409344.png"
			}            
		};
		Send(bot, banguild, options, embed, "guildBanRemove") 
	});

	//USER NICKNAME UPDATE
	bot.on('guildMemberUpdate', (oldMember, newMember) => {
		if (oldMember.nickname != newMember.nickname){
			var embed = {
				"description": `<@${newMember.user.id}> - *${newMember.user.id}*`,
				"url": newMember.user.displayAvatarURL,
				"color": 29372,
				"timestamp": new Date(),
				"footer": {
					"text": `${newMember.nickname || newMember.user.username}`
				},
				"thumbnail": {
				"url": newMember.user.displayAvatarURL,
				},
				"author": {
				"name": `NICKNAME CHANGED: ${newMember.user.tag}`,
				"icon_url": "https://cdn.discordapp.com/emojis/435119397237948427.png"
				},
				"fields": [
				{
					"name": "Old Nickname",
					"value": `**${oldMember.nickname || oldMember.user.username}**`,
					"inline": true
					},
				{
					"name": "New Nickname",
					"value": `**${newMember.nickname || newMember.user.username}**`,
					"inline": true
					}
				]
			};
			Send(bot, newMember.guild, options, embed, "guildMemberUpdate") 
		}
	});

	//USER UPDATE AVATAR, USERNAME, DISCRIMINATOR
	bot.on('userUpdate', (oldUser, newUser) => {
		// Log quand le user change de username (et possiblement discriminator)
		var usernameChangedMsg = null;
		var discriminatorChangedMsg = null;
		var avatarChangedMsg = null;
		
		// search the member from all guilds, since the userUpdate event doesn't provide guild information as it is a global event.
		bot.guilds.forEach(function(guild, guildid) {
			guild.members.forEach(function(member, memberid) {
				if (newUser.id == memberid ) {
					var member = bot.guilds.get(guildid).members.get(member.id)

					//USERNAME CHANGED
					if ( oldUser.username != newUser.username) {
						usernameChangedMsg = {
							"description": `<@${newUser.id}> - *${newUser.id}*`,
							"url": newUser.displayAvatarURL,
							"color": 29372,
							"timestamp": new Date(),
							"footer": {
								"text": `${member.nickname || member.user.username}`
							},
							"thumbnail": {
								"url": newUser.displayAvatarURL
							},
							"author": {
							"name": `USERNAME CHANGED: ${newUser.tag}`,
							"icon_url": "https://cdn.discordapp.com/emojis/435119402279763968.png"
							},
							"fields": [
							{
								"name": "Old Username",
								"value": `**${oldUser.username}**`,
								"inline": true
								},
							{
								"name": "New Username",
								"value": `**${newUser.username}**`,
								"inline": true
								}
							]
						};
					}

					//DISCRIMINATOR CHANGED
					if (oldUser.discriminator != newUser.discriminator ) {
						discriminatorChangedMsg = {
							"description": `<@${newUser.id}> - *${newUser.id}*`,
							"url": newUser.displayAvatarURL,
							"color": 29372,
							"timestamp": new Date(),
							"footer": {
								"text": `${member.nickname || member.user.username}`
							},
							"thumbnail": {
								"url": newUser.displayAvatarURL
							},
							"author": {
							"name": `DISCRIMINATOR CHANGED: ${newUser.tag}`,
							"icon_url": "https://cdn.discordapp.com/emojis/435119390078271488.png"
							},
							"fields": [
							{
								"name": "Old Discriminator",
								"value": `**${oldUser.discriminator}**`,
								"inline": true
								},
							{
								"name": "New Discriminator",
								"value": `**${newUser.discriminator}**`,
								"inline": true
								}
							]
						};
					}

					//AVATAR CHANGED
					if (oldUser.avatar != newUser.avatar ) {
						avatarChangedMsg = {
							"description": `<@${newUser.id}> - *${newUser.id}*`,
							"url": newUser.displayAvatarURL,
							"color": 29372,
							"timestamp": new Date(),
							"footer": {
								"text": `${member.nickname || member.user.username}`
							},
							"thumbnail": {
								"url": newUser.displayAvatarURL
							},
							"author": {
								"name": `AVATAR CHANGED: ${newUser.tag}`,
								"icon_url": "https://cdn.discordapp.com/emojis/435119382910337024.png"
							},		
							"image": {
								"url": oldUser.displayAvatarURL
							},					
							"fields": [
								{
								"name": "Old Avatar",
								"value": ":arrow_down:" 
								}
							]
						};
					}

					if (usernameChangedMsg) Send(bot, guild, options, usernameChangedMsg, "usernameChangedMsg");
					if (discriminatorChangedMsg) Send(bot, guild, options, discriminatorChangedMsg, "discriminatorChangedMsg");
					if (avatarChangedMsg) Send(bot, guild, options, avatarChangedMsg, "avatarChangedMsg");
				}
			});
		});
	});	

	//CHANNEL JOIN LEAVE SWITCH
	bot.on('voiceStateUpdate', (oldMember, newMember) => {

		//SET CHANNEL NAME STRING
		if (oldMember.voiceChannelID) {
			if (oldMember.voiceChannel.parent){
				oldChannelName = `${oldMember.voiceChannel.parent.name}\n\t**${oldMember.voiceChannel.name}**\n*${oldMember.voiceChannelID}*`;
			}else{
				oldChannelName = `-\n\t**${oldMember.voiceChannel.name}**\n*${oldMember.voiceChannelID}*`;
			}
		}
		if (newMember.voiceChannelID) {
			if (newMember.voiceChannel.parent){
				newChannelName = `${newMember.voiceChannel.parent.name}\n\t**${newMember.voiceChannel.name}**\n*${newMember.voiceChannelID}*`;
			}else{
				newChannelName = `-\n\t**${newMember.voiceChannel.name}**\n*${newMember.voiceChannelID}*`;
			}
		}

		//JOINED
		if (!oldMember.voiceChannelID && newMember.voiceChannelID) 
		{
			var embed = {
				"description": `<@${newMember.user.id}> - *${newMember.user.id}*`,
				"url": newMember.user.displayAvatarURL,
				"color": 3381555,
				"timestamp": new Date(),
				"footer": {
					"text": `${newMember.nickname || newMember.user.username}`
				},
				"thumbnail": {
				  "url": newMember.user.displayAvatarURL,
				},
				"author": {
				  "name": `Joined channel : ${newMember.user.tag}`,
				  "icon_url": "https://cdn.discordapp.com/emojis/435184638160404480.png"
				},
				"fields": [
					{
						"name": "Joined channel",
						"value": `${newChannelName}`
					}
				]
			};
			connectedUsers.push(newMember.user.id)
		}

		//LEFT
		if (oldMember.voiceChannelID && !newMember.voiceChannelID) 
		{	
			{
				var embed = {
					"description": `<@${newMember.user.id}> - *${newMember.user.id}*`,
					"url": newMember.user.displayAvatarURL,
					"color": 10040115,
					"timestamp": new Date(),
					"footer": {
						"text": `${newMember.nickname || newMember.user.username}`
					},
					"thumbnail": {
					  "url": newMember.user.displayAvatarURL,
					},
					"author": {
					  "name": `Left channel : ${newMember.user.tag}`,
					  "icon_url": "https://cdn.discordapp.com/emojis/435174900227899393.png"
					},
					"fields": [
						{
							"name": "Left channel",
							"value": `${oldChannelName}`
						}
					]
				};
			}
			connectedUsers.splice(connectedUsers.indexOf(oldMember.user.id), 1)
		}

		//SWITCH
		if (oldMember.voiceChannelID && newMember.voiceChannelID) 
		{	
			//False positive check
			if (oldMember.voiceChannelID != newMember.voiceChannelID)
			{
				{
					var embed = {
						"description": `<@${newMember.user.id}> - *${newMember.user.id}*`,
						"url": newMember.user.displayAvatarURL,
						"color": 13421568,
						"timestamp": new Date(),
						"footer": {
							"text": `${newMember.nickname || newMember.user.username}`
						},
						"thumbnail": {
						  "url": newMember.user.displayAvatarURL,
						},
						"author": {
						  "name": `Switched channel : ${newMember.user.tag}`,
						  "icon_url": "https://cdn.discordapp.com/emojis/435440286559371265.png"
						},
						"fields": [
							{
								"name": "Left channel",
								"value": `${oldChannelName}`,
								"inline": true
							},
							{
								"name": "Joined channel",
								"value": `${newChannelName}`,
								"inline": true
							}
						]
					};
				}
				if(oldMember.id === '500017855631327232'){
					newMember.voiceChannel.members.map(m => {
						if(m.id === '500021011387908116'){
							bot1.leave()
						}
					})	
				}else if(oldMember.id === '500021011387908116'){
					newMember.voiceChannel.members.map(m => {
						if(m.id === '500017855631327232'){
							bot2.leave()
						}
					})
				}
	
			}
		}

		//SEND
		if (embed){
			Send(bot, newMember.guild, options, embed, "voiceStateUpdate") 
		}
	});


//SEND FUNCTION
	function Send(bot, guild, options, msg, movement) {
		let embed = ""
		// Initialize option if empty
		if (!options) {
			options = {};
		}
		
		// Initialize if options are multi-server
		if (options[guild.id]) {
			options = options[guild.id];
		}

		// Add default channel
		if (typeof options.auditlog == 'undefined') options.auditlog = `audit-log`;   
		if (typeof options.movement == 'undefined') options.movement = `audit-log`;   
		if (typeof options.voice == 'undefined') options.voice = false;   

		eventtype = {
			guildMemberAdd : "movement", 
			guildMemberRemove : "movement", 
			guildBanAdd : "movement", 
			guildBanRemove : "movement", 
			guildMemberUpdate : "auditlog", 
			usernameChangedMsg : "auditlog", 
			discriminatorChangedMsg : "auditlog", 
			avatarChangedMsg : "auditlog", 
			voiceStateUpdate : "voice"
			}
		
		channelname =  (options[eventtype[movement]])
		if (channelname) {
			// define channel object
			channel = guild.channels.find(val => val.name === channelname)
			if (channel) {
				if (channel.permissionsFor(bot.user).has('SEND_MESSAGES') && channel.permissionsFor(bot.user).has('SEND_MESSAGES')) {
					if (typeof msg === "object") {
						// Embed
						if (channel.permissionsFor(bot.user).has('EMBED_LINKS')) {
							embed = msg ;
							channel.send({ embed });
						}
						else {
							console.log(`${description.name} -> The Bot doesn't have the permission EMBED_LINKS to the configured channel "${channelname}" on server "${guild.name}" (${guild.id})`);		
						}
					}
					else {
					// Send the Message
					channel.send(msg);
					}
				}
				else {
					console.log(`${description.name} -> The Bot doesn't have the permission to send public message to the configured channel "${channelname}" on server "${guild.name}" (${guild.id})`);
				}
			} else
			{
				console.log(`${description.name} -> The channel "${channelname}" do not exist on server "${guild.name}" (${guild.id})`);	
			}
		}
		else {
			// console.log(`AuditLog: No channel option for event ${movement} on server "${guild.name}" (${guild.id})`);
		}

	};
	
};
